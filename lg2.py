import json
import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

TOKEN = "7910998632:AAGNBq5PF4a1VTp_tFmoHsUOoqFtYpWmxuA"
ADMIN_ID = 7910998632
DATA_FILE = "pet_data.json"

if os.path.exists(DATA_FILE):
    with open(DATA_FILE, 'r') as f:
        pet_data = json.load(f)
else:
    pet_data = {
        'users': {},
        'banned': [],
        'admins': [ADMIN_ID],
        'moders': [],
        'shop': {
            'cars': {'–õ–∞–¥–∞': 5000, 'BMW': 15000, 'Ferrari': 50000},
            'houses': {'–ö–≤–∞—Ä—Ç–∏—Ä–∞': 20000, '–ö–æ—Ç—Ç–µ–¥–∂': 50000, '–í–∏–ª–ª–∞': 100000},
            'items': {'–ï–¥–∞': 100, '–ò–≥—Ä—É—à–∫–∞': 200, '–û—à–µ–π–Ω–∏–∫': 500}
        }
    }

def save_data():
    with open(DATA_FILE, 'w') as f:
        json.dump(pet_data, f, indent=4)

def calculate_level(xp):
    return xp // 1000 + 1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in pet_data['banned']:
        await update.message.reply_text("üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!")
        return
    
    if user_id not in pet_data['users']:
        pet_data['users'][user_id] = {
            'pet': {'name': 'Forchik', 'xp': 0, 'level': 1, 'hunger': 50, 'happiness': 50},
            'money': 1000,
            'inventory': {'cars': [], 'houses': [], 'items': []}
        }
        save_data()
    
    await update.message.reply_text(
        f"üêæ –ü—Ä–∏–≤–µ—Ç! –Ø Forchik - —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü!\n"
        f"üîπ –£—Ä–æ–≤–µ–Ω—å: {pet_data['users'][user_id]['pet']['level']}\n"
        f"üí∞ –î–µ–Ω—å–≥–∏: {pet_data['users'][user_id]['money']}\n"
        f"üçó –°—ã—Ç–æ—Å—Ç—å: {pet_data['users'][user_id]['pet']['hunger']}/100\n"
        f"üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {pet_data['users'][user_id]['pet']['happiness']}/100\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/status - –°—Ç–∞—Ç—É—Å –ø–∏—Ç–æ–º—Ü–∞
/feed - –ü–æ–∫–æ—Ä–º–∏—Ç—å (+10 –æ–ø—ã—Ç–∞)
/play - –ü–æ–∏–≥—Ä–∞—Ç—å (+10 –æ–ø—ã—Ç–∞)
/work - –†–∞–±–æ—Ç–∞—Ç—å (–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏)
/shop - –ú–∞–≥–∞–∑–∏–Ω
/inventory - –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
/transfer [—Å—É–º–º–∞] [id] - –ü–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏
/game - –ú–∏–Ω–∏-–∏–≥—Ä—ã –¥–ª—è –æ–ø—ã—Ç–∞

üîê –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:
–ù–∞–ø–∏—à–∏—Ç–µ "–∞–¥–º–∏–Ω" –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""
    await update.message.reply_text(help_text)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in pet_data['users']:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    pet = pet_data['users'][user_id]['pet']
    await update.message.reply_text(
        f"üê∂ –ò–º—è: {pet['name']}\n"
        f"üìä –£—Ä–æ–≤–µ–Ω—å: {pet['level']}\n"
        f"‚≠ê –û–ø—ã—Ç: {pet['xp']}/{pet['level']*1000}\n"
        f"üçó –°—ã—Ç–æ—Å—Ç—å: {pet['hunger']}/100\n"
        f"üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {pet['happiness']}/100\n"
        f"üí∞ –î–µ–Ω—å–≥–∏: {pet_data['users'][user_id]['money']}"
    )

def add_xp(user_id, amount):
    pet_data['users'][user_id]['pet']['xp'] += amount
    new_level = calculate_level(pet_data['users'][user_id]['pet']['xp'])
    if new_level > pet_data['users'][user_id]['pet']['level']:
        pet_data['users'][user_id]['pet']['level'] = new_level
        return True
    return False

async def feed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in pet_data['users']:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    pet = pet_data['users'][user_id]['pet']
    pet['hunger'] = min(100, pet['hunger'] + 20)
    level_up = add_xp(user_id, 10)
    
    msg = "üçó Forchik –ø–æ–µ–ª! +20 –∫ —Å—ã—Ç–æ—Å—Ç–∏, +10 –æ–ø—ã—Ç–∞"
    if level_up:
        msg += f"\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! Forchik –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è {pet['level']}!"
    
    await update.message.reply_text(msg)
    save_data()

async def play(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in pet_data['users']:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    pet = pet_data['users'][user_id]['pet']
    pet['happiness'] = min(100, pet['happiness'] + 20)
    level_up = add_xp(user_id, 10)
    
    msg = "üéæ Forchik –ø–æ–∏–≥—Ä–∞–ª! +20 –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é, +10 –æ–ø—ã—Ç–∞"
    if level_up:
        msg += f"\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! Forchik –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è {pet['level']}!"
    
    await update.message.reply_text(msg)
    save_data()

async def work(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in pet_data['users']:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    earnings = random.randint(50, 200)
    pet_data['users'][user_id]['money'] += earnings
    await update.message.reply_text(f"üíº Forchik –ø–æ—Ä–∞–±–æ—Ç–∞–ª –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª {earnings} –º–æ–Ω–µ—Ç!")
    save_data()

async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöó –ú–∞—à–∏–Ω—ã", callback_data='shop_cars')],
        [InlineKeyboardButton("üè† –î–æ–º–∞", callback_data='shop_houses')],
        [InlineKeyboardButton("üõí –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data='shop_items')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('üõçÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?', reply_markup=reply_markup)

async def shop_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    category = query.data.split('_')[1]
    
    items = pet_data['shop'][category]
    buttons = []
    for item, price in items.items():
        buttons.append([InlineKeyboardButton(f"{item} - {price} –º–æ–Ω–µ—Ç", callback_data=f"buy_{category}_{item}")])
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='shop_back')])
    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(text=f"üõí –í—ã–±–µ—Ä–∏—Ç–µ {category}:", reply_markup=reply_markup)

async def buy_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    _, category, item = query.data.split('_')
    price = pet_data['shop'][category][item]
    
    if pet_data['users'][user_id]['money'] >= price:
        pet_data['users'][user_id]['money'] -= price
        pet_data['users'][user_id]['inventory'][category].append(item)
        await query.edit_message_text(f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {item} –∑–∞ {price} –º–æ–Ω–µ—Ç!")
        save_data()
    else:
        await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!")

async def inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in pet_data['users']:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    inv = pet_data['users'][user_id]['inventory']
    text = "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n"
    text += f"üöó –ú–∞—à–∏–Ω—ã: {', '.join(inv['cars']) if inv['cars'] else '–ù–µ—Ç'}\n"
    text += f"üè† –î–æ–º–∞: {', '.join(inv['houses']) if inv['houses'] else '–ù–µ—Ç'}\n"
    text += f"üõí –ü—Ä–µ–¥–º–µ—Ç—ã: {', '.join(inv['items']) if inv['items'] else '–ù–µ—Ç'}"
    await update.message.reply_text(text)

async def transfer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in pet_data['users']:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    try:
        amount = int(context.args[0])
        recipient_id = int(context.args[1])
        
        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
            
        if user_id == recipient_id:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–µ–±–µ!")
            return
            
        if pet_data['users'][user_id]['money'] < amount:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!")
            return
            
        if recipient_id not in pet_data['users']:
            await update.message.reply_text("‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        pet_data['users'][user_id]['money'] -= amount
        pet_data['users'][recipient_id]['money'] += amount
        await update.message.reply_text(f"‚úÖ –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
        save_data()
    except:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /transfer [—Å—É–º–º–∞] [id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]")

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data='game_guess')],
        [InlineKeyboardButton("‚úÇÔ∏è –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞", callback_data='game_rps')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:', reply_markup=reply_markup)

async def game_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    game_type = query.data.split('_')[1]
    
    if game_type == 'guess':
        context.user_data['game'] = {'type': 'guess', 'number': random.randint(1, 10)}
        await query.edit_message_text("üé≤ –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. –£–≥–∞–¥–∞–π!")
    elif game_type == 'rps':
        buttons = [
            [InlineKeyboardButton("ü™® –ö–∞–º–µ–Ω—å", callback_data='rps_rock')],
            [InlineKeyboardButton("‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data='rps_scissors')],
            [InlineKeyboardButton("üìÑ –ë—É–º–∞–≥–∞", callback_data='rps_paper')],
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.edit_message_text("‚úÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=reply_markup)

async def rps_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_choice = query.data.split('_')[1]
    choices = {'rock': 'ü™® –ö–∞–º–µ–Ω—å', 'scissors': '‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã', 'paper': 'üìÑ –ë—É–º–∞–≥–∞'}
    bot_choice = random.choice(list(choices.keys()))
    
    result = ""
    if user_choice == bot_choice:
        result = "ü§ù –ù–∏—á—å—è!"
        xp = 5
    elif (user_choice == 'rock' and bot_choice == 'scissors') or \
         (user_choice == 'scissors' and bot_choice == 'paper') or \
         (user_choice == 'paper' and bot_choice == 'rock'):
        result = "üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
        xp = 20
    else:
        result = "üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
        xp = 0
    
    user_id = query.from_user.id
    if xp > 0:
        level_up = add_xp(user_id, xp)
        if level_up:
            result += f"\nüéâ Forchik –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è {pet_data['users'][user_id]['pet']['level']}!"
    
    await query.edit_message_text(
        f"–í—ã: {choices[user_choice]}\n"
        f"–ë–æ—Ç: {choices[bot_choice]}\n"
        f"{result}\n"
        f"+{xp} –æ–ø—ã—Ç–∞"
    )
    save_data()

async def guess_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        guess = int(update.message.text)
        game_data = context.user_data.get('game', {})
        
        if game_data.get('type') != 'guess':
            return
            
        if guess == game_data['number']:
            xp = 30
            level_up = add_xp(user_id, xp)
            msg = f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +{xp} –æ–ø—ã—Ç–∞"
            if level_up:
                msg += f"\nüéâ Forchik –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è {pet_data['users'][user_id]['pet']['level']}!"
            await update.message.reply_text(msg)
            context.user_data.pop('game', None)
        elif guess < game_data['number']:
            await update.message.reply_text("‚¨ÜÔ∏è –ë–æ–ª—å—à–µ")
        else:
            await update.message.reply_text("‚¨áÔ∏è –ú–µ–Ω—å—à–µ")
    except ValueError:
        pass

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.lower()
    
    if text == "–∞–¥–º–∏–Ω" and user_id in pet_data['admins']:
        keyboard = [
            [InlineKeyboardButton("üí∞ –í—ã–¥–∞—Ç—å –≤–∞–ª—é—Ç—É", callback_data='admin_give_money')],
            [InlineKeyboardButton("‚ùå –ó–∞–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É", callback_data='admin_take_money')],
            [InlineKeyboardButton("üëë –í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É", callback_data='admin_give_admin')],
            [InlineKeyboardButton("üõ°Ô∏è –í—ã–¥–∞—Ç—å –º–æ–¥–µ—Ä–∫—É", callback_data='admin_give_moder')],
            [InlineKeyboardButton("üö´ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞", callback_data='admin_remove_rights')],
            [InlineKeyboardButton("üì¢ –ê–Ω–æ–Ω—Å –≤—Å–µ–º", callback_data='admin_announce')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', reply_markup=reply_markup)
    elif text == "–∞–¥–º–∏–Ω":
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
    else:
        await guess_handler(update, context)

async def admin_panel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data.split('_')[1]
    
    if action == 'give_money':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: 123456789 1000")
        context.user_data['admin_action'] = 'give_money'
    elif action == 'take_money':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –¥–ª—è –∏–∑—ä—è—Ç–∏—è:\n–ü—Ä–∏–º–µ—Ä: 123456789 500")
        context.user_data['admin_action'] = 'take_money'
    elif action == 'give_admin':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –∞–¥–º–∏–Ω–∫–∏:\n–ü—Ä–∏–º–µ—Ä: 123456789")
        context.user_data['admin_action'] = 'give_admin'
    elif action == 'give_moder':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –º–æ–¥–µ—Ä–∫–∏:\n–ü—Ä–∏–º–µ—Ä: 123456789")
        context.user_data['admin_action'] = 'give_moder'
    elif action == 'remove_rights':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤:\n–ü—Ä–∏–º–µ—Ä: 123456789")
        context.user_data['admin_action'] = 'remove_rights'
    elif action == 'announce':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–æ–Ω—Å–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        context.user_data['admin_action'] = 'announce'

async def admin_action_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in pet_data['admins']:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!")
        return
    
    action = context.user_data.get('admin_action')
    if not action:
        return
    
    try:
        if action == 'announce':
            message = update.message.text
            for user in pet_data['users']:
                try:
                    await context.bot.send_message(
                        chat_id=user,
                        text=f"üì¢ –í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message}"
                    )
                except:
                    continue
            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        else:
            args = update.message.text.split()
            target_id = int(args[0])
            
            if target_id not in pet_data['users']:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
                
            if action == 'give_money':
                amount = int(args[1])
                pet_data['users'][target_id]['money'] += amount
                await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
                
            elif action == 'take_money':
                amount = int(args[1])
                pet_data['users'][target_id]['money'] = max(0, pet_data['users'][target_id]['money'] - amount)
                await update.message.reply_text(f"‚úÖ –ò–∑—ä—è—Ç–æ {amount} –º–æ–Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")
                
            elif action == 'give_admin':
                if target_id not in pet_data['admins']:
                    pet_data['admins'].append(target_id)
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω")
                
            elif action == 'give_moder':
                if target_id not in pet_data.get('moders', []):
                    if 'moders' not in pet_data:
                        pet_data['moders'] = []
                    pet_data['moders'].append(target_id)
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ç–µ–ø–µ—Ä—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä")
                
            elif action == 'remove_rights':
                if target_id in pet_data['admins']:
                    pet_data['admins'].remove(target_id)
                if target_id in pet_data.get('moders', []):
                    pet_data['moders'].remove(target_id)
                await update.message.reply_text(f"‚úÖ –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —Å–±—Ä–æ—à–µ–Ω—ã")
                
        save_data()
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    context.user_data.pop('admin_action', None)

def run_bot():
    application = Application.builder().token(TOKEN).build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("feed", feed))
    application.add_handler(CommandHandler("play", play))
    application.add_handler(CommandHandler("work", work))
    application.add_handler(CommandHandler("shop", shop))
    application.add_handler(CommandHandler("inventory", inventory))
    application.add_handler(CommandHandler("transfer", transfer))
    application.add_handler(CommandHandler("game", game))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞
    application.add_handler(CallbackQueryHandler(shop_handler, pattern='^shop_'))
    application.add_handler(CallbackQueryHandler(buy_handler, pattern='^buy_'))
    application.add_handler(CallbackQueryHandler(lambda u,c: u.edit_message_text("üîô"), pattern='^shop_back$'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä
    application.add_handler(CallbackQueryHandler(game_handler, pattern='^game_'))
    application.add_handler(CallbackQueryHandler(rps_handler, pattern='^rps_'))
    
    # –ê–¥–º–∏–Ω-—Å–∏—Å—Ç–µ–º–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(CallbackQueryHandler(admin_panel_handler, pattern='^admin_'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, admin_action_handler))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    run_bot()